import os
import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
import cv2
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model

# Set a custom cache directory for TensorFlow Hub
os.environ['TFHUB_CACHE_DIR'] = r'C:\python_venvs\veggi\temp_files'

# Load the object detection model from TensorFlow Hub
detector = hub.load("https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2")

# Load the banana type classification model
banana_type_model = load_model(r'C:\python_venvs\veggi\banana_recognition_model.h5')

# Load class labels for COCO dataset (common object categories)
coco_labels = {
    1: 'person', 2: 'bicycle', 3: 'car', 4: 'motorcycle', 5: 'airplane', 6: 'bus',
    7: 'train', 8: 'truck', 9: 'boat', 10: 'traffic light', 11: 'fire hydrant',
    13: 'stop sign', 14: 'parking meter', 15: 'bench', 16: 'bird', 17: 'cat',
    18: 'dog', 19: 'horse', 20: 'sheep', 21: 'cow', 22: 'elephant', 23: 'bear',
    24: 'zebra', 25: 'giraffe', 27: 'backpack', 28: 'umbrella', 31: 'handbag',
    32: 'tie', 33: 'suitcase', 34: 'frisbee', 35: 'skis', 36: 'snowboard',
    37: 'sports ball', 38: 'kite', 39: 'baseball bat', 40: 'baseball glove',
    41: 'skateboard', 42: 'surfboard', 43: 'tennis racket', 44: 'bottle',
    46: 'wine glass', 47: 'cup', 48: 'fork', 49: 'knife', 50: 'spoon',
    51: 'bowl', 52: 'banana', 53: 'apple', 54: 'sandwich', 55: 'orange',
    56: 'broccoli', 57: 'carrot', 58: 'hot dog', 59: 'pizza', 60: 'donut',
    61: 'cake', 62: 'chair', 63: 'couch', 64: 'potted plant', 65: 'bed',
    67: 'dining table', 70: 'toilet', 72: 'tv', 73: 'laptop', 74: 'mouse',
    75: 'remote', 76: 'keyboard', 77: 'cell phone', 78: 'microwave',
    79: 'oven', 80: 'toaster', 81: 'sink', 82: 'refrigerator', 84: 'book',
    85: 'clock', 86: 'vase', 87: 'scissors', 88: 'teddy bear', 89: 'hair drier',
    90: 'toothbrush'
}

# Define banana type labels (adjust according to your model's classes)
banana_type_labels = ['Banana', 'Banana Lady Finger', 'Banana Red']  # Example labels

# Function to draw bounding boxes on the image
def draw_boxes(image, boxes, class_names, scores, threshold=0.5):
    for box, class_name, score in zip(boxes, class_names, scores):
        if score >= threshold:
            ymin, xmin, ymax, xmax = box
            color = (255, 0, 0)
            image_height, image_width, _ = image.shape
            start_point = (int(xmin * image_width), int(ymin * image_height))
            end_point = (int(xmax * image_width), int(ymax * image_height))
            image = cv2.rectangle(image, start_point, end_point, color, 2)
            text = f'{class_name}: {int(score * 100)}%'
            image = cv2.putText(image, text, start_point, cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
    return image

# Function to apply Non-Maximum Suppression (NMS)
def non_max_suppression(boxes, scores, threshold=0.5):
    indices = tf.image.non_max_suppression(
        boxes, scores, max_output_size=50, iou_threshold=threshold
    ).numpy()
    return boxes[indices], scores[indices]

# Function to classify the type of banana
def classify_banana_type(banana_image, model):
    banana_image = cv2.resize(banana_image, (100, 100))  # Resize to the input size of your classifier
    banana_image = np.expand_dims(banana_image, axis=0)  # Add batch dimension
    banana_image = banana_image / 255.0  # Normalize
    predictions = model.predict(banana_image)
    predicted_class = np.argmax(predictions)
    return banana_type_labels[predicted_class]

# Load an image for object detection
img_path = r'C:\Users\DBoran01\OneDrive - Kenvue\Pictures\Screenshots\Screenshot 2024-07-21 155656.png'
img = cv2.imread(img_path)
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img_resized = cv2.resize(img_rgb, (320, 320))  # Resize the image to 320x320

# Convert the image to a tensor and add a batch dimension
img_tensor = tf.convert_to_tensor(img_resized, dtype=tf.uint8)
img_tensor = tf.expand_dims(img_tensor, 0)  # Add batch dimension

# Perform object detection
detector_output = detector(img_tensor)
boxes = detector_output['detection_boxes'].numpy()[0]
class_ids = detector_output['detection_classes'].numpy()[0].astype(int)
scores = detector_output['detection_scores'].numpy()[0]

# Map class IDs to class names
class_names = [coco_labels[class_id] for class_id in class_ids]

# Filter detections for bananas
banana_boxes = boxes[class_ids == 52]
banana_scores = scores[class_ids == 52]

# Apply Non-Maximum Suppression
banana_boxes, banana_scores = non_max_suppression(banana_boxes, banana_scores, threshold=0.5)

# Apply additional post-processing to count bananas
def post_process_detections(boxes, scores, threshold=0.5):
    # Filter boxes and scores based on confidence threshold
    filtered_indices = np.where(scores >= threshold)[0]
    filtered_boxes = boxes[filtered_indices]
    filtered_scores = scores[filtered_indices]
    return filtered_boxes, filtered_scores

# Apply post-processing
banana_boxes, banana_scores = post_process_detections(banana_boxes, banana_scores, threshold=0.5)

# Draw bounding boxes on the image and classify each banana
img_with_boxes = img_rgb.copy()

# Draw bounding boxes on the image and classify each banana
for box in banana_boxes:
    ymin, xmin, ymax, xmax = box
    ymin, xmin, ymax, xmax = int(ymin * img_rgb.shape[0]), int(xmin * img_rgb.shape[1]), int(ymax * img_rgb.shape[0]), int(xmax * img_rgb.shape[1])
    banana_image = img_rgb[ymin:ymax, xmin:xmax]  # Crop the banana region
    banana_type = classify_banana_type(banana_image, banana_type_model)
    img_with_boxes = draw_boxes(img_rgb, [box], [banana_type], [1.0])

# Count the number of bananas detected
banana_count = len(banana_boxes)
print(f'Number of bananas detected: {banana_count}')

# Display the image with bounding boxes
plt.imshow(img_with_boxes)
plt.axis('off')
plt.show()
